{"version":3,"file":"static/js/213.9fb5a2e8.chunk.js","mappings":"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","sources":["component/Admin/NewProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAlert } from \"react-alert\";\r\nimport MetaData from \"../layouts/MataData/MataData\";\r\nimport Loader from \"../layouts/loader/Loader\";\r\nimport Sidebar from \"./Siderbar\";\r\nimport { createProduct, clearErrors } from \"../../actions/productAction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { NEW_PRODUCT_RESET } from \"../../constants/productsConstatns\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport StorageIcon from \"@material-ui/icons/Storage\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@mui/icons-material/Collections\";\r\nimport ShoppingCartOutlinedIcon from \"@material-ui/icons/ShoppingCartOutlined\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\n\r\nimport Navbar from \"./Navbar\";\r\n\r\nimport useStyles from \"../User/LoginFromStyle\";\r\nimport {\r\n  Avatar,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nfunction NewProduct() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const alert = useAlert();\r\n\r\n  const { loading, error, success } = useSelector(\r\n    (state) => state.addNewProduct\r\n  );\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [Stock, setStock] = useState(0);\r\n  const [info, setInfo] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [isCategory, setIsCategory] = useState(false);\r\n  const fileInputRef = useRef();\r\n  const [toggle, setToggle] = useState(false);\r\n  const [file, setFile] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n  // togle handler =>\r\n  const toggleHandler = () => {\r\n    console.log(\"toggle\");\r\n    setToggle(!toggle);\r\n  };\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value);\r\n    setIsCategory(true);\r\n  };\r\n\r\n  const handleImageUpload = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n  const categories = [\r\n    //  \"Cricket Kits\",\r\n    //  \"Batting Gloves\",\r\n    //  \"Batting Pads\",\r\n    //  \"Bats\",\r\n    //  \"Bags\",\r\n    //  \"Helmets\",\r\n    //  \"Balls\",\r\n    //  \"Stumps\",\r\n    //  \"Shoes\",\r\n    //  \"Clothing\",\r\n    //  \"Accessories\",\r\n    \"Level 1\",\r\n    \"Level 2\",\r\n    \"Level 3\",\r\n    \"Level 4\",\r\n  ];\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert.error(error);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (success) {\r\n      alert.success(\"Product Created Successfully\");\r\n      history.push(\"/admin/dashboard\");\r\n      dispatch({ type: NEW_PRODUCT_RESET });\r\n    }\r\n  }, [dispatch, alert, error, history, success]);\r\n\r\n  const createProductSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const myForm = new FormData();\r\n    myForm.set(\"name\", name);\r\n    myForm.set(\"price\", price);\r\n    myForm.set(\"description\", description);\r\n    myForm.set(\"category\", category);\r\n    myForm.set(\"Stock\", Stock);\r\n    myForm.set(\"info\", info);\r\n    myForm.set(\"file\",file);\r\n    images.forEach((currImg) => {\r\n      myForm.append(\"images\", currImg);\r\n    });\r\n\r\n    dispatch(createProduct(myForm));\r\n  };\r\n\r\n  const createProductImagesChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImages([]);\r\n    setImagesPreview([]);\r\n\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((old) => [...old, reader.result]);\r\n          setImages((old) => [...old, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n \r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <MetaData title={\"New Product\"} />\r\n          <div className={classes.updateProduct}>\r\n            <div\r\n              className={\r\n                !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\r\n              }\r\n            >\r\n              <Sidebar />\r\n            </div>\r\n\r\n            <div className={classes.secondBox1}>\r\n              <div className={classes.navBar1}>\r\n                <Navbar toggleHandler={toggleHandler} />\r\n              </div>\r\n\r\n              <div\r\n                className={`${classes.formContainer} ${classes.formContainer2}`}\r\n              >\r\n                <form\r\n                  className={`${classes.form} ${classes.form2}`}\r\n                  encType=\"multipart/form-data\"\r\n                  onSubmit={createProductSubmitHandler}\r\n                >\r\n                  <Avatar className={classes.avatar}>\r\n                    <AddCircleOutlineIcon />\r\n                  </Avatar>\r\n                  <Typography\r\n                    variant=\"h5\"\r\n                    component=\"h1\"\r\n                    className={classes.heading}\r\n                  >\r\n                    Create Product\r\n                  </Typography>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={`${classes.nameInput} ${classes.textField}`}\r\n                    label=\"Product Name\"\r\n                    required\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <ShoppingCartOutlinedIcon\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Price\"\r\n                    value={price}\r\n                    required\r\n                    fullWidth\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <AttachMoneyIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Stock\"\r\n                    value={Stock}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setStock(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <StorageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Product info\"\r\n                    value={info}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setInfo(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <InfoIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.selectOption}>\r\n                    {!isCategory && (\r\n                      <Typography variant=\"body2\" className={classes.labelText}>\r\n                        Choose Category\r\n                      </Typography>\r\n                    )}\r\n                    <FormControl className={classes.formControl}>\r\n                      <Select\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={category}\r\n                        onChange={handleCategoryChange}\r\n                        className={classes.select}\r\n                        inputProps={{\r\n                          name: \"category\",\r\n                          id: \"category-select\",\r\n                        }}\r\n                        MenuProps={{\r\n                          classes: {\r\n                            paper: classes.menu,\r\n                          },\r\n                          anchorOrigin: {\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          transformOrigin: {\r\n                            vertical: \"top\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          getContentAnchorEl: null,\r\n                        }}\r\n                      >\r\n                        {!category && (\r\n                          <MenuItem value=\"\">\r\n                            <em>Choose Category</em>\r\n                          </MenuItem>\r\n                        )}\r\n                        {categories.map((cate) => (\r\n                          <MenuItem key={cate} value={cate}>\r\n                            {cate}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={classes.descriptionInput}\r\n                    label=\"Product Description\"\r\n                    multiline\r\n                    rows={1}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <DescriptionIcon\r\n                            className={classes.descriptionIcon}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.root}>\r\n                    <div className={classes.imgIcon}>\r\n                      <CollectionsIcon\r\n                        fontSize=\"large\"\r\n                        style={{ fontSize: 40 }}\r\n                      />\r\n                    </div>\r\n\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"avatar\"\r\n                      className={classes.input}\r\n                      accept=\"image/*\"\r\n                      onChange={createProductImagesChange}\r\n                      multiple\r\n                      style={{ display: \"none\" }}\r\n                      ref={fileInputRef}\r\n                    />\r\n                    <label htmlFor=\"avatar-input\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={classes.uploadAvatarButton}\r\n                        startIcon={\r\n                          <CloudUploadIcon\r\n                            style={{\r\n                              color: \"#FFFFFF\",\r\n                            }}\r\n                          />\r\n                        }\r\n                        onClick={handleImageUpload}\r\n                      >\r\n                        <p className={classes.uploadAvatarText}>\r\n                          Upload Images\r\n                        </p>\r\n                      </Button>\r\n                    </label>\r\n                  </div>\r\n\r\n                  <Box className={classes.imageArea}>\r\n                    {imagesPreview &&\r\n                      imagesPreview.map((image, index) => (\r\n                        <img\r\n                          key={index}\r\n                          src={image}\r\n                          alt=\"Product Preview\"\r\n                          className={classes.image}\r\n                        />\r\n                      ))}\r\n                  </Box>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={classes.descriptionInput}\r\n                    label=\"Pdf Link\"\r\n                    multiline\r\n                    rows={1}\r\n                    value={file}\r\n                    onChange={(e) => setFile(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <DescriptionIcon\r\n                            className={classes.descriptionIcon}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.loginButton}\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={loading ? true : false}\r\n                  >\r\n                    Create\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default NewProduct;\r\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","_useSelector","useSelector","state","addNewProduct","loading","error","success","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","price","setPrice","_useState5","_useState6","description","setDescription","_useState7","_useState8","category","setCategory","_useState9","_useState10","Stock","setStock","_useState11","_useState12","info","setInfo","_useState13","_useState14","images","setImages","_useState15","_useState16","imagesPreview","setImagesPreview","_useState17","_useState18","isCategory","setIsCategory","fileInputRef","useRef","_useState19","_useState20","toggle","setToggle","_useState21","_useState22","file","setFile","classes","useStyles","useEffect","clearErrors","push","type","NEW_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","console","log","formContainer","formContainer2","form","form2","encType","onSubmit","e","preventDefault","myForm","FormData","set","forEach","currImg","append","createProduct","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","id","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","reader","FileReader","onload","readyState","old","_toConsumableArray","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","current","click","uploadAvatarText","Box","imageArea","image","index","src","alt","loginButton","disabled"],"sourceRoot":""}